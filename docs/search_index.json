[["index.html", "Git and GitHub set up recipe for the West-lab Preface", " Git and GitHub set up recipe for the West-lab Simcelile Chenge 2021-09-10 Preface "],["about.html", "About", " About This document presents Git and GitHub set up guidelines for the Adam West-lab in the Biological Sciences Department at the University of Cape Town. "],["introduction.html", " 1 Introduction", " 1 Introduction This document should help you create a GitHub account and install Git. The minimum set-up for our demo in the lab. For this purpose, I am writing it as a recipe or to-do list. It should help you prepare for the demo without reading or thinking about stuff you are not interested in at the moment. I received a response from everyone about their Operating System (OS); mostly Windows, one Mac and one DOS. I did not know what that last one was. Therefore, the to-do list is for Windows and Mac, sorry DOS user but I hope they work for you as well. When you follow the to-do list, you might encounter OS and/or computer specific issues. You can check with me, Google it - should inevitably take you to Stack Overflow (lovely question-and-answer community). I created this to-do list from Happy Git with R https://happygitwithr.com; it is a beautiful set-up resource. Bryan (2017) also has a standalone introduction for Happy Git with R. They give succinct installation and configuration guidelines, and in a lively manner. Their lovely effort does not need repeating. If you’re keen on using GitHub, I would suggest you read Happy Git with R. Here I just go straight to the point (click through or command by command) to get Git and GitHub for our demo in the lab. This should take you less than an hour assuming you do not encounter any issues. References "],["github.html", " 2 GitHub", " 2 GitHub Go to https://github.com Sign up for a GitHub account. Your username should be in lower cases, short and preferably your real name. For example mine is ‘sim-chenge.’ GitHub will ask you to personalise your account, you can do that or just skip the step. Select continue for free, to create a free account. If you like, you can make your profile look nice and inviting (e.g., bio, picture, etc.) "],["r-and-rstudio.html", " 3 R and RStudio", " 3 R and RStudio I know everyone is using R and RStudio.This is an invitation to update if you have not caught up with the latest versions. "],["git.html", " 4 Git 4.1 For Windows 4.2 For DOS 4.3 For Mac", " 4 Git 4.1 For Windows Go to https://gitforwindows.org Download the .exe file extension relevant to the Windows bit you’re running. Happy Git and RStudio suggest that Git should live in a path like C:/Program Files/Git/bin/git.exe Make sure you create a desktop shortcut for Git Bash. I would suggest you just accept all the defaults thereafter. 4.2 For DOS I would suggest trying https://git-scm.com/download 4.3 For Mac I think Git is in developer tools. Open the terminal, enter which git. If you have git you should get this /usr/bin/git. If not you will get ‘git: command not found’ and prompted to install developer tools,accept! "],["personalise-git.html", " 5 Personalise Git 5.1 Git bash 5.2 In RStudio", " 5 Personalise Git Create a test-proj in RStudio In the pop-up wizard type directory name test-proj, below that is its path and below it you should see a box with a note ‘create a git repository,’ check it. Apparently sometimes RStudio does not automatically recongise Git If this happens check out chapter 13 of Happy Git https://happygitwithr.com/rstudio-see-git.html There are two ways of introducing yourself to Git, in RStudio or via the Shell (Git Bash). 5.1 Git bash Open the desktop shortcut of Git Bash or In RStudio go to: Tools &gt; Shell… And that should take you to Git Bash. You will note that Bash shows you the path to your test project test-proj. # use the commands (e.g.,) # git config --global user.name &#39;Simcelile Chenge&#39; # git config --global user.email &#39;ch...@myuct.ac.za&#39; You can make this your GitHub username and email; these are your credentials when you collaborate with others. This command confirms Git knows you git config --global --list # should return something like # user.name=Simcelile Chenge # user.email=ch...@myuct.ac.za # core.editor=emacs When you accepted the defaults you accepted a core-editor. If you do not have it or want to configure it. Mine is ‘emacs,’ you could choose e.g., ‘notepad++’ # set it or change it like this # git config --global core.editor &quot;notepad++&quot; 5.2 In RStudio Install an awesome R package called ‘usethis’ and make sure it is in your library # install.packages(&#39;usethis&#39;) # library(&#39;usethis&#39;) # use_git_config(user.name = &quot;Jane Doe&quot;, user.email = &quot;ch...@myuct.ac.za&quot;) "],["git-and-github.html", " 6 Git and GitHub 6.1 Generate a personal access token (PAT) 6.2 Store the PAT", " 6 Git and GitHub You need to confirm Git and GitHub can talk to each other. This will be part of the demo in the lab. When you want Git and GitHub talk to each other, GitHub might want you to authentication yourself every time. This could be extremely frustrating in the long run. So, you will cache your credentials. You can use HTTPS or SSH keys, we will use HTTPS. I tested it first and found it easier to follow. Bryan (2017) and GitHub also recommends it for first time users. 6.1 Generate a personal access token (PAT) Git uses this instead of a password. # the function below will take you to GitHub to create a PAT # set the expiration date you want # go ahead generate token # usethis::create_github_token() Keep the PAT safe somewhere. GitHub will send you an email letting you know a PAT was created (will not send the actual token via email). You can access it on GitHub or via RStudio. More about that below. 6.2 Store the PAT You need to store your token into the Git store. # install an R package called &#39;gitcreds&#39; and keep it in your library # install.packages(&#39;gitcreds&#39;) # library(gitcreds) # gitcreds_set(url = &#39;your PAT&#39;) # use to check, replace or see your token # gitcreds_get() # &lt;gitcreds&gt; # protocol: https # host : github.com # username: PersonalAccessToken # password: &lt;-- hidden --&gt; # OR # gitcreds::gitcreds_set() # -&gt; Your current credentials for &#39;https://github.com&#39;: # protocol: https # host : github.com # username: PersonalAccessToken # password: &lt;-- hidden --&gt; #-&gt; What would you like to do? # 1: Keep these credentials # 2: Replace these credentials # 3: See the password / token You can probably delete the test-proj References "],["conclusion.html", " 7 Conclusion", " 7 Conclusion If nothing went wrong (highly unlikely - I just hope you found a solution) you should have a GitHub account and Git in your computer. Git and GitHub should be able to talk to each other, we will test this will in our live demo. I look forward to all your success stories:) "],["references.html", " 8 References", " 8 References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
